import React,{ useState } from "react";
import { useForm, Controller } from "react-hook-form";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import Select from "react-select";



const schema = yup.object().shape({
	firstName: yup.string().min(3).required("Please enter your first name"),
	lastName: yup.string().min(4).required("Please enter your last name"),
  email: yup.string().required("Please enter your email"),
  message: yup.string().min(10).required("Please enter your Message"),
});

function ContactForm() {
    const { register,control, handleSubmit, formState: { errors } } = useForm({
      resolver: yupResolver(schema),
    });
    
  const [isValid, setIsValid] = useState(false);
  const [focusMessage, setMessage] = useState('');

  const nameRegex = /\S/;

  const validateName = (event) => {
    const name = event.target.value;
    if (nameRegex.test(name) && name.length>3) {
      setIsValid(true);
      setMessage('Your Name looks good');
    } else {
      setIsValid(false);
      setMessage('Please enter a name with more than 3 characters!');
    }
  };

  const [isValidLast, setIsValidLast] = useState(false);
  const [focusMessageLast, setMessageLast] = useState('');

  const validateLast = (event) => {
    const last = event.target.value;
    if (nameRegex.test(last) && last.length>4) {
      setIsValidLast(true);
      setMessageLast('Your last name looks good');
    } else {
      setIsValidLast(false);
      setMessageLast('Please enter a last name with more than 4 characters!');
    }
  };
  

  const [isValidEmail, setIsValidEmail] = useState(false);
  const [focusMessageEmail, setMessageEmail] = useState('');

  const emailRegex=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()\\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

  const validateEmail = (event) => {
    const email = event.target.value;
    if (emailRegex.test(email) && email.length>3) {
      setIsValidEmail(true);
      setMessageEmail('Your email looks good');
    } else {
      setIsValidEmail(false);
      setMessageEmail('Please enter a email with more than 3 characters!');
    }
  };  

    function onSubmit(data) {
        console.log(data);
    }

    console.log(errors);

    return (
        <form onSubmit={handleSubmit(onSubmit)}>
          <label htmlFor="firstName">First Name</label>
            <input id="firstName" 
               placeholder="First name"
               className="formInput"
               onChange={validateName}
             {...register("firstName", {  required: true,minLength: {
                    value: 3,
                    message: 'First Name should be greater than 3 characters' // JS only: <p>error message</p> TS only support string
                    } })} />

            {errors.firstName && errors.firstName.type === "required" }
            {errors.firstName && errors.firstName.type === "minLength" }
                
            <div className={`message ${isValid ? 'success' : 'error'}`}>
                {focusMessage}
            </div>


            <label htmlFor="lastName">Last Name</label>
            <input id="lastName"
            placeholder="Last name"
            className="formInput"
            onChange={validateLast}
            {...register("lastName", { required: true,minLength:4 })} />

            {errors.lastName && errors.lastName.type === "required" }
            {errors.lastName && errors.lastName.type === "minLength"}

            <div className={`message ${isValidLast ? 'success' : 'error'}`}>
                {focusMessageLast}
            </div>  

            <label>Email</label>
            <input 
            label="email"
            placeholder="joedoe@gmail.com"
            className="formInput"
            onChange={validateEmail} 
            {...register("email", {
             required: true,
             minLength:3,
             pattern:
               /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()\\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
            })} />
             {errors.email && errors.email.type === "required" }
            {errors.email && errors.email.type === "minLength" }
            <div className={`message ${isValidEmail ? 'success' : 'error'}`}>
                {focusMessageEmail}
            </div>

            <label>Profession</label>
      <Controller
        name="professionType"
        className="controller"
        render={({ field }) => (
          <Select
            {...register(field,{
              required: true
            })}
            options={[
              { value: "SoftwareEngineer", label: "Software Engineer" },
              { value: "GraphicDesigner", label: "Graphic Designer" },
              { value: "BackEnd", label: "Back End Developer" }
            ]}
          />
        )}
        control={control}
        defaultValue=""
      />


<div>
<label>Message</label>
<input type="text" {...register("message", {required:true, minLength:10 })} />
</div>

            <button>Send</button>
        </form>
    );
}

export default ContactForm;


ContactForm.defaultProps = {
	register: () => {},
};

/* * Create a form with the following inputs and validation:
*
* -   First name - required, minimum 3 characters
* -   Last name - required, minimum 4 characters
* -   Email - required, must be in a valid email format
* -   Subject - required, this must be a select box with at least 2 options
* -   Message - required, minimum 10 characters. */
